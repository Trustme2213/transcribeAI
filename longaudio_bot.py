import sys
import locale
import os
import sqlite3
import datetime
import telebot
from telebot import types
import json
import time
import logging
import traceback

# Custom modules for audio processing and transcription
from whisper_transcription import transcribe_audio
from ya_gpt import ya_request_1, ya_request_2, process_text_in_chunks
from audio_chunker import AudioChunker
from utils import (
    ensure_dirs_exist,
    save_transcription,
    parse_gpt_response,
    get_survey_by_id,
    create_inspection,
    initialize_answers,
    format_duration
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdin.reconfigure(encoding='utf-8')
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7668766634:AAGHWABEISVBDjtB0sLEturG0QsG4edcXmc')
DB_NAME = 'bot.db'
AUDIO_DIR = 'temp_audio'
TRANSCRIPTS_DIR = 'transcripts'
MAX_CHUNK_SIZE_MS = 300000  # 5 minutes in milliseconds
OVERLAP_MS = 3000  # 3 seconds overlap between chunks

# Ensure directories exist
ensure_dirs_exist([AUDIO_DIR, TRANSCRIPTS_DIR])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
audio_chunker = AudioChunker(
    chunk_size_ms=MAX_CHUNK_SIZE_MS,
    overlap_ms=OVERLAP_MS,
    temp_dir=AUDIO_DIR
)

# Initialize database if it doesn't exist
def initialize_db():
    from initialize_db import create_tables, add_test_questions
    
    if not os.path.exists(DB_NAME) or os.path.getsize(DB_NAME) == 0:
        logger.info("Initializing database...")
        create_tables()
        add_test_questions()
    else:
        logger.info("Database already exists, checking tables...")
        try:
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            
            # Check if users table exists
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if not cursor.fetchone():
                logger.warning("Database exists but tables are missing. Re-creating tables...")
                create_tables()
                add_test_questions()
                
            conn.close()
        except Exception as e:
            logger.error(f"Error checking database: {str(e)}")
            logger.info("Recreating database...")
            if os.path.exists(DB_NAME):
                os.remove(DB_NAME)
            create_tables()
            add_test_questions()

# Initialize database
initialize_db()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {user_id: {"questions": list_of_question_ids, "inspection_id": int, ...}}

def get_questions_by_survey_id(survey_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ ID –∞–Ω–∫–µ—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è YandexGPT.
    
    :param survey_id: ID –∞–Ω–∫–µ—Ç—ã
    :return: –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤ {question_id: question_text}
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    cursor.execute('''
        SELECT question_id, question_text FROM questions WHERE survey_id = ?
    ''', (survey_id,))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    questions = {row[0]: row[1] for row in cursor.fetchall()}
    conn.close()
    return questions

def get_all_questions_for_survey(survey_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    
    :param survey_id: ID –∞–Ω–∫–µ—Ç—ã
    :return: –°–ª–æ–≤–∞—Ä—å {question_id: question_text}
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT question_id, question_text FROM questions WHERE survey_id = ?
    ''', (survey_id,))
    
    questions = {row[0]: row[1] for row in cursor.fetchall()}
    conn.close()
    return questions

def get_question_by_id(question_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ ID.
    
    :param question_id: ID –≤–æ–ø—Ä–æ—Å–∞
    :return: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT question_text FROM questions WHERE question_id = ?', (question_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return result[0]
    return "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

def register_user(user_id, username):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, user_id, created_at) VALUES (?, ?, ?)",
                  (username, user_id, datetime.datetime.now()))
        conn.commit()
        logger.info(f"User registered: {user_id} ({username})")
    except sqlite3.IntegrityError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logger.info(f"User already exists: {user_id} ({username})")
    finally:
        conn.close()

def add_answer(inspection_id: int, question_id: int, answer_text: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    
    :param inspection_id: ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    :param question_id: ID –≤–æ–ø—Ä–æ—Å–∞
    :param answer_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    cursor.execute('''
        UPDATE answers SET answer_text = ? 
        WHERE inspection_id = ? AND question_id = ?
    ''', (answer_text, inspection_id, question_id))
    
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO answers (inspection_id, question_id, answer_text)
            VALUES (?, ?, ?)
        ''', (inspection_id, question_id, answer_text))
    
    conn.commit()
    conn.close()

def get_null_questions(inspection_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.
    
    :param inspection_id: ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: –°–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT question_id FROM answers 
        WHERE inspection_id = ? AND answer_text = "null"
    ''', (inspection_id,))
    null_questions = [row[0] for row in cursor.fetchall()]
    conn.close()
    return null_questions

def send_null_questions_to_bot(user_id, inspection_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param inspection_id: ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    questions = get_null_questions(inspection_id)
    
    if not questions:
        bot.send_message(user_id, "üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        send_report_to_user(user_id, inspection_id)
        return
    
    user_states[user_id] = {
        "questions": questions,
        "inspection_id": inspection_id
    }
    
    bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–æ–≤:")
    for i, q_id in enumerate(questions, 1):
        question_text = get_question_by_id(q_id)
        if question_text:
            bot.send_message(user_id, f"{i}. {question_text}\n/answer {i} [–≤–∞—à –æ—Ç–≤–µ—Ç]")

class PDF:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF-–æ—Ç—á–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8.
    """
    def __init__(self):
        from fpdf import FPDF
        self.pdf = FPDF()
        self.pdf.add_page()
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        self.pdf.set_font('Arial', size=12)
        
    def add_header(self, text):
        self.pdf.set_font('Arial', 'B', 16)
        self.pdf.cell(200, 10, txt=text, ln=True, align='C')
        self.pdf.ln(15)
        self.pdf.set_font('Arial', size=12)
        
    def add_question_answer(self, idx, question, answer):
        self.pdf.multi_cell(0, 8, f"–í–æ–ø—Ä–æ—Å #{idx}:", 0, 'L')
        self.pdf.multi_cell(0, 8, question, 0, 'L')
        self.pdf.multi_cell(0, 8, f"–û—Ç–≤–µ—Ç:", 0, 'L')
        self.pdf.multi_cell(0, 8, answer, 0, 'L')
        self.pdf.ln(10)
        
    def save(self, filepath):
        self.pdf.output(filepath)

def generate_inspection_report(inspection_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8.
    
    :param inspection_id: ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT q.question_text, a.answer_text 
        FROM answers a
        JOIN questions q ON a.question_id = q.question_id
        WHERE a.inspection_id = ?
        ORDER BY q.question_id
    ''', (inspection_id,))
    
    report_data = cursor.fetchall()
    conn.close()
    
    if not report_data:
        return None
    
    # Create PDF
    pdf = PDF()
    pdf.add_header("–û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    for idx, (question, answer) in enumerate(report_data, 1):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        def safe_text(text):
            return text if isinstance(text, str) else str(text)
        
        question = safe_text(question)
        answer = safe_text(answer)
        
        pdf.add_question_answer(idx, question, answer)
    
    filename = f"report_{inspection_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    filepath = os.path.join(AUDIO_DIR, filename)
    pdf.save(filepath)
    
    return filepath

def send_report_to_user(user_id: int, inspection_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param inspection_id: ID –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    try:
        report_path = generate_inspection_report(inspection_id)
        if not report_path:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            return
            
        with open(report_path, 'rb') as report_file:
            bot.send_document(
                chat_id=user_id,
                document=report_file,
                caption=f"üìÑ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ #{inspection_id}",
                timeout=60
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(report_path)
        
    except Exception as e:
        logger.error(f"Error sending report: {str(e)}")
        logger.error(traceback.format_exc())
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def process_audio_file(user_id, audio_path, survey_id=3):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª: —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    :param survey_id: ID –∞–Ω–∫–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        inspection_id = create_inspection(user_id, survey_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã
        questions = get_all_questions_for_survey(survey_id)
        question_ids = list(questions.keys())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ null
        initialize_answers(inspection_id, question_ids)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = bot.send_message(
            user_id, 
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏
        chunk_paths = audio_chunker.split_audio(audio_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot.edit_message_text(
            f"üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunk_paths)} —á–∞—Å—Ç–µ–π. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ...",
            chat_id=user_id,
            message_id=status_msg.message_id
        )
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        all_transcriptions = []
        start_time = time.time()
        
        for i, chunk_path in enumerate(chunk_paths, 1):
            chunk_start_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot.edit_message_text(
                f"üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —á–∞—Å—Ç—å {i}/{len(chunk_paths)}...",
                chat_id=user_id,
                message_id=status_msg.message_id
            )
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            transcription = transcribe_audio(chunk_path, save_to_file=False)
            all_transcriptions.append(transcription)
            
            chunk_time = time.time() - chunk_start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
            progress = i / len(chunk_paths) * 100
            elapsed = time.time() - start_time
            estimated_total = elapsed / progress * 100 if progress > 0 else 0
            remaining = max(0, estimated_total - elapsed)
            
            bot.edit_message_text(
                f"üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(chunk_paths)} —á–∞—Å—Ç–µ–π ({progress:.1f}%)\n"
                f"‚è± –ü—Ä–æ—à–ª–æ: {format_duration(elapsed)}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {format_duration(remaining)}",
                chat_id=user_id,
                message_id=status_msg.message_id
            )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        full_transcription = audio_chunker.combine_transcriptions(all_transcriptions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript_path = save_transcription(
            full_transcription, 
            TRANSCRIPTS_DIR, 
            user_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        bot.edit_message_text(
            f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...",
            chat_id=user_id,
            message_id=status_msg.message_id
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ YandexGPT
        try:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            bot.edit_message_text(
                f"üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞...",
                chat_id=user_id,
                message_id=status_msg.message_id
            )
            
            formatted_text = ya_request_1(full_transcription)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            formatted_path = save_transcription(
                formatted_text, 
                os.path.join(TRANSCRIPTS_DIR, 'formatted'), 
                user_id
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞
            bot.edit_message_text(
                f"üîÑ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤...",
                chat_id=user_id,
                message_id=status_msg.message_id
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤–æ–ø—Ä–æ—Å–æ–≤
            survey_questions = get_questions_by_survey_id(survey_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è YandexGPT
            questions_str = json.dumps(survey_questions, ensure_ascii=False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º
            if len(formatted_text) > 10000:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
                bot.edit_message_text(
                    f"üîÑ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤). –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
                    chat_id=user_id,
                    message_id=status_msg.message_id
                )
                answers_json = process_text_in_chunks(formatted_text, questions_str)
            else:
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                answers_json = ya_request_2(formatted_text, questions_str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            result_path = save_transcription(
                answers_json, 
                os.path.join(TRANSCRIPTS_DIR, 'analysis'), 
                user_id
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            answers = parse_gpt_response(answers_json)
            
            if answers:
                for q_id, answer in answers.items():
                    try:
                        question_id = int(q_id)
                        add_answer(inspection_id, question_id, str(answer) if answer is not None else "null")
                    except (ValueError, TypeError) as e:
                        logger.error(f"Error processing answer for question {q_id}: {str(e)}")
            else:
                bot.edit_message_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é.",
                    chat_id=user_id,
                    message_id=status_msg.message_id
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
            bot.send_message(
                user_id,
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è."
            )
            
            send_null_questions_to_bot(user_id, inspection_id)
            
        except Exception as e:
            logger.error(f"GPT processing error: {str(e)}")
            logger.error(traceback.format_exc())
            bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}\n\n"
                f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
                chat_id=user_id,
                message_id=status_msg.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            with open(transcript_path, 'rb') as f:
                bot.send_document(
                    chat_id=user_id,
                    document=f,
                    caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"
                )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        audio_chunker.cleanup_chunks(chunk_paths)
        if os.path.exists(audio_path):
            os.remove(audio_path)
        
    except Exception as e:
        logger.error(f"Audio processing error: {str(e)}")
        logger.error(traceback.format_exc())
        bot.send_message(
            user_id, 
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}"
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'chunk_paths' in locals():
            audio_chunker.cleanup_chunks(chunk_paths)
        if 'audio_path' in locals() and os.path.exists(audio_path):
            os.remove(audio_path)

@bot.message_handler(commands=['start'])
def handle_start(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    
    register_user(user_id, username)
    
    bot.reply_to(
        message, 
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/process_audio - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é üé§"
    )

@bot.message_handler(commands=['help'])
def handle_help(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
    """
    bot.reply_to(
        message, 
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3 –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /process_audio\n"
        "2. –ë–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é Whisper\n"
        "3. –ó–∞—Ç–µ–º –±–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é YandexGPT –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã\n"
        "4. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å\n"
        "5. –í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π PDF-–æ—Ç—á–µ—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/process_audio - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "/answer [–Ω–æ–º–µ—Ä] [–æ—Ç–≤–µ—Ç] - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
    )

@bot.message_handler(commands=['process_audio'])
def handle_process_audio(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /process_audio.
    """
    msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3")
    bot.register_next_step_handler(msg, process_audio_step)

@bot.message_handler(commands=['status'])
def handle_status(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status.
    """
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        if 'inspection_id' in state:
            inspection_id = state['inspection_id']
            null_questions = get_null_questions(inspection_id)
            bot.reply_to(
                message, 
                f"üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                f"ID –ø—Ä–æ–≤–µ—Ä–∫–∏: {inspection_id}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {len(null_questions)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        bot.reply_to(
            message, 
            "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process_audio –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )

@bot.message_handler(commands=['answer'])
def handle_answer(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /answer.
    """
    try:
        user_id = message.from_user.id
        args = message.text.split()
        
        if len(args) < 3:
            bot.send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç: /answer [–Ω–æ–º–µ—Ä] [–æ—Ç–≤–µ—Ç]")
            return
            
        _, num_str, *answer_parts = args
        answer_text = ' '.join(answer_parts)
        
        if not num_str.isdigit():
            bot.send_message(user_id, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
            
        question_num = int(num_str)
        
        if user_id not in user_states or 'questions' not in user_states[user_id]:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
            
        questions = user_states[user_id]['questions']
        inspection_id = user_states[user_id]['inspection_id']
        
        if not (1 <= question_num <= len(questions)):
            bot.send_message(user_id, f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(questions)}")
            return
            
        question_id = questions[question_num-1]
        add_answer(inspection_id, question_id, answer_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        remaining_questions = get_null_questions(inspection_id)
        if remaining_questions:
            send_null_questions_to_bot(user_id, inspection_id)
        else:
            bot.send_message(user_id, "‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            send_report_to_user(user_id, inspection_id)
            user_states.pop(user_id, None)
            
    except Exception as e:
        logger.error(f"Error handling answer: {str(e)}")
        logger.error(traceback.format_exc())
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_audio_step(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
    """
    try:
        user_id = message.from_user.id
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
        if message.document and message.document.mime_type == 'audio/mpeg':
            file_id = message.document.file_id
        elif message.audio and message.audio.mime_type == 'audio/mpeg':
            file_id = message.audio.file_id
        else:
            bot.send_message(user_id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è MP3 —Ñ–∞–π–ª!")
            return
            
        file_info = bot.get_file(file_id)
        audio_path = os.path.join(AUDIO_DIR, f"{user_id}_{datetime.datetime.now().timestamp()}.mp3")
        
        with open(audio_path, 'wb') as f:
            f.write(bot.download_file(file_info.file_path))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        process_audio_file(user_id, audio_path)
        
    except Exception as e:
        logger.error(f"Error in process_audio_step: {str(e)}")
        logger.error(traceback.format_exc())
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if 'audio_path' in locals() and os.path.exists(audio_path):
            os.remove(audio_path)

@bot.message_handler(content_types=['audio', 'document'])
def handle_direct_audio(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
    """
    if (message.document and message.document.mime_type == 'audio/mpeg') or \
       (message.audio and message.audio.mime_type == 'audio/mpeg'):
        process_audio_step(message)
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3.")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    bot.reply_to(
        message, 
        "üëã –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/process_audio - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª MP3 üé§"
    )

# Entry point for direct testing
if __name__ == '__main__':
    logger.info("Starting bot polling...")
    bot.infinity_polling()